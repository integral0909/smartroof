roofs = {}

roofs.init = function() {
  this.$form  = $('#roofs-form')
  this.$input = $('#roofs-autocomplete')

  this.listenSubmit()
  this.initAutocomplete()
}

roofs.listenSubmit = function() {
  this.$form.submit(function() {
    if (roofs.place) {
      var place = roofs.place
    } else {
      var place = roofs.$form.find('input').val()
    }

    window.location.href = '/roofs/' + place
    return false
  })
}

roofs.initAutocomplete = function() {
  this.autocomplete = new google.maps.places.Autocomplete(this.$input[0])
  this.autocomplete.addListener('place_changed', this.fillInAddress)
}

roofs.fillInAddress = function() {
  var place   = roofs.autocomplete.getPlace()
  roofs.place = roofs.$input.val()

  // If map persists (inner page)
  if (roofs.myMap) { roofs.changeLocation(place) }
}

roofs.initMap = function() {
  this.$map           = $('#roofs-trace__area')
  this.$undo          = $('#roofs-trace__btn--undo')
  this.$next          = $('#roofs-trace__btn--next')
  this.markers        = []
  this.calculatedPoly = null

  if (this.$map.length) {
    // Initialize map
    this.myMap = new L.Map(this.$map[0], {
      center: new L.LatLng($('#roof_latitude').val(), $('#roof_longitude').val()),
      zoom:   21
    })

    // Render Google Maps layer
    L.gridLayer.googleMutant({
        type:    'satellite',
        maxZoom: 23
    }).addTo(this.myMap)

    // Add marker icon
    var myIcon = L.icon({
      iconUrl:   "<%= image_path('leaflet/marker-icon.png') %>",
      shadowUrl: "<%= image_path('leaflet/marker-shadow.png') %>"
    })
    L.marker([$('#roof_latitude').val(), $('#roof_longitude').val()], { icon: myIcon }).addTo(this.myMap)

    // Bind actions
    this.$undo.on('click', this.pressUndo.bind(this))
    this.$next.on('click', this.pressNext.bind(this))
    this.myMap.on('click', this.addMarker.bind(this))

    var slopes = $('#roofs-slope').find('.card')
    slopes.on('click', this.clickSlope.bind(this))
  }
}

roofs.addMarker = function(event) {
  var marker = new L.marker(event.latlng, {
    draggable: 'true',
    icon: L.divIcon({
      className:  'leaflet-mouse-marker',
      iconAnchor: [6, 6],
      iconSize:   [12, 12]
    })
  }).on('dragend', function(event){
    var marker   = event.target
    var position = marker.getLatLng()

    marker.setLatLng(new L.LatLng(position.lat, position.lng), { draggable:'true' })
    this.drawPoly()
  }).addTo(this.myMap)

  this.markers.push(marker)
  this.drawPoly()

  return this
}

roofs.undoMarker = function() {
  if (this.markers.length > 0) {
    this.markers.pop().remove()
    this.drawPoly()
  }
}

roofs.pressUndo = function() {
  this.undoMarker()
}

roofs.pressNext = function() {
  $('#roofs-slope').fadeIn()
  $('#roofs-progress--trace').addClass('bg-success')
  $('#roofs-progress--slope').removeClass('bg-secondary')
}

roofs.changeLocation = function(place) {
  var geo = place.geometry
  if (geo) {
    var address = $('#roofs-autocomplete').val()
    $('#roof_address').val(address)
    $('.roofs-trace__info').find('span').html(address)

    $('#roof_latitude').val(geo.location.lat())
    $('#roof_longitude').val(geo.location.lng())

    if (roofs.myMap) { roofs.myMap.off(); roofs.myMap.remove() }

    roofs.initMap()
  }
}

roofs.clickSlope = function(e) {
  $('#roof_slope').val($(e.currentTarget).data('type'))
  $('#roofs-slope').fadeOut()
  $('.roofs-form').fadeIn()
  $('#roofs-progress--slope').addClass('bg-success')
  $('#roofs-progress--estimation').removeClass('bg-secondary')
}

roofs.drawPoly = function() {
  if (this.markers.length > 0) {
    var coordinates = this.markers.map(function(value, index){ return [value.getLatLng().lat, value.getLatLng().lng] })
    var polygones   = coordinates.concat([new L.LatLng(coordinates[0][0], coordinates[0][1])])

    if (this.calculatedPoly !== null) { this.calculatedPoly.removeFrom(this.myMap) }
    this.calculatedPoly = L.polyline(polygones, { 'fill': true }).addTo(this.myMap)

    var area = L.GeometryUtil.geodesicArea(this.calculatedPoly.getLatLngs()) * 10.7639104
    $('#roof_area').val(Math.round(area))
  }

  this.checkButtons()
}

roofs.checkButtons = function() {
  if (this.markers.length > 0) {
    this.$undo.removeClass('disabled')
  } else {
    this.$undo.addClass('disabled')
  }

  if (this.markers.length >= 3) {
    this.$next.removeClass('disabled')
  } else {
    this.$next.addClass('disabled')
  }
}

$(function() {
  roofs.initMap()
})
